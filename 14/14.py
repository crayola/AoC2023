from tqdm import tqdm
from functools import cache

INPUT = "input"


class Line:
    """
    Represents a line of characters, allowing for manipulation and analysis of the
    string. It can simulate the physical action of a line of dominoes, where each
    '.O' is replaced by 'O.' until the line stabilizes, and tracks the count of
    'O' characters.

    Attributes:
        line (str): Initialized in the `__init__` method. It stores a string
            representation of the input line, with all characters joined together
            without any separators.

    """
    def __init__(self, line):
        """
        Initializes the Line object by joining the input list of characters into
        a single string, stored in the `line` attribute.

        Args:
            line (List[str]): Passed to the function when an instance of the class
                is created, allowing the `__init__` method to accept a list of strings.

        """
        self.line = "".join(line)

    def tilt_once(self):
        """
        Reverses the orientation of the first character in the line if it is a dot
        followed by an 'O'. It replaces ".O" with "O.". This effectively "tilts"
        the line once.

        """
        self.line = self.line.replace(".O", "O.")

    def tilt(self):
        """
        Repeats the `tilt_once` method until the line's orientation remains unchanged.

        """
        pretilt = self.line
        self.tilt_once()
        while pretilt != self.line:
            pretilt = self.line
            self.tilt_once()

    @property
    def o_count(self):
        """
        Counts the occurrences of 'O' in the line string attribute of the Line
        instance, returning the total count.

        Returns:
            int: The total count of the character 'O' in the string `self.line`.

        """
        return self.line.count('O')

    def __repr__(self):
        """
        Represents the object in a string format, returning a string that includes
        the object's line number.

        Returns:
            str: A string representation of the object.

        """
        return f"Line: {self.line}"


class Platform:
    """
    Represents a 2D grid of lines. It initializes a grid from a string of lines,
    calculates a score based on line counts, and provides methods to tilt the grid
    in different directions, mirroring lines as necessary for some tilts.

    Attributes:
        lines (List[Line]): Initialized in the `__init__` method with a list
            comprehension. It contains Line objects, created by stripping and
            splitting the input string into lines, and then reversing the order
            of the lines after each tilt operation.
        cols (List[Line]): Created by transposing the `lines` attribute using the
            built-in `zip` function. This means that each column of the platform
            is represented as a Line object.
        n_rows (int): Set to the number of rows in the platform, which is determined
            by the length of the `self.lines` list in the `__init__` method.
        n_cols (int): Derived from the length of the `self.cols` list, which is a
            list of `Line` objects, where each object represents a column of the
            platform.

    """
    def __init__(self, lines):
        """
        Initializes the object with a list of lines, strips each line, and creates
        Line objects. It then transposes the lines to create columns, calculates
        the number of rows and columns, and stores these values as instance variables.

        Args:
            lines (str | List[str]): Initialized with a string containing
                newline-separated lines, where each line is a string.

        """
        self.lines = [Line(line.strip()) for line in lines.strip().split('\n')]
        self.cols = list(map(Line, zip(*[line.line for line in self.lines])))
        self.n_rows = len(self.lines)
        self.n_cols = len(self.cols)

    @property
    def score(self):
        """
        Calculates a score by iterating over lines in the platform, multiplying
        the number of remaining rows by the number of occupied cells in each line,
        and summing these products.

        Returns:
            int: The total score calculated by summing the products of the line's
            obstacle count and its distance from the bottom of the platform.

        """
        score = 0
        for i, line in enumerate(self.lines):
            score += (platform.n_rows - i) * line.o_count
        return score
    
    @property
    def big_string(self):
        """
        Constructs a single string by joining all lines in the Platform's lines
        attribute, separated by newline characters.

        Returns:
            str: Generated by joining all lines of text in the `lines` attribute
            with newline characters, effectively creating a single string containing
            all the lines.

        """
        return "\n".join([line.line for line in self.lines]) 

    def tilt_north(self):
        """
        Rotates all columns by calling their `tilt` method and then re-generates
        the lines of the platform by transposing the lines of the columns and
        re-creating them as a list of Line objects.

        """
        for col in self.cols:
            col.tilt()
        self.lines = list(map(Line, zip(*[cols.line for cols in self.cols])))

    def tilt_south(self):
        """
        Reverses the order of elements in each column, applies a tilt transformation,
        and then reverses the elements back to their original order. It then
        reconstructs the lines of the platform by transposing the columns.

        """
        for col in self.cols:
            col.line = col.line[::-1]
            col.tilt()
            col.line = col.line[::-1]
        self.lines = list(map(Line, zip(*[cols.line for cols in self.cols])))

    def tilt_west(self):
        """
        Rotates each line in the platform by calling the `tilt` method on each
        line, then rearranges the lines into vertical columns.

        """
        for line in self.lines:
            line.tilt()
        self.cols = list(map(Line, zip(*[line.line for line in self.lines])))

    def tilt_east(self):
        """
        Reverses each line of the platform, applies a tilt transformation to the
        reversed line, and then reverses the line again to its original orientation.
        The function also updates the platform's columns by transposing the lines
        and creating new Line objects.

        """
        for line in self.lines:
            line.line = line.line[::-1]
            line.tilt()
            line.line = line.line[::-1]
        self.cols = list(map(Line, zip(*[line.line for line in self.lines])))

    def cycle(self):
        """
        Rotates the platform through four cardinal directions: north, west, south,
        and east.

        """
        self.tilt_north()
        self.tilt_west()
        self.tilt_south()
        self.tilt_east()

    def __repr__(self):
        """
        Returns a string representation of the Platform instance, consisting of
        each line in the instance's lines attribute, joined by newline characters.

        Returns:
            str: A string representation of the object, specifically a multi-line
            string consisting of the text of all lines in the object.

        """
        return "\n".join([line.line for line in self.lines])

@cache
def make_100_cycles(platform_str):
    """
    Cycles a `Platform` object 100 times, with each cycle calling the `cycle`
    method, and returns the resulting `big_string` and `score` attributes. The
    `@cache` decorator likely caches function results to improve performance.

    Args:
        platform_str (str): Used to create an instance of the `Platform` class,
            which is then used to generate a big string and a score after 100 cycles.

    Returns:
        Tuple[str,int]: A tuple containing a big string and a score.

    """
    platform = Platform(platform_str)
    for i in range(100):
        platform.cycle()
    return platform.big_string, platform.score


if __name__ == "__main__":
    lines = open(INPUT).read()
    platform = Platform(lines)
    platform.tilt_north()
    print(f"part1: {platform.score}")

    platform_str = platform.big_string
    for i in tqdm(range(10000000)):
        platform_newstr, score = make_100_cycles(platform_str)
        platform_str = platform_newstr

    print(f"part2: {score}")


